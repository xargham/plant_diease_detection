from flask import Flask,render_template,request
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os
from werkzeug.utils import secure_filename
from test import predict

pre = predict()

# define the flask app
app=Flask(__name__)


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict',methods=['GET','POST'])
def upload():
    if request.method=='POST':
        # get the file from post request
        f=request.files['file']

        # save the file to uploads folder
        basepath=os.path.dirname(os.path.realpath('_file_'))
        file_path=os.path.join(basepath,'uploads',secure_filename(f.filename))
        f.save(file_path)

        # Make prediction
        result =pre.model_predict(file_path)
        l = result.size
        rs = 0
        for i in range(l):

            resul = result[0][i]
            print(result[0][i])
            res = resul * 100
            rs = rs + res


            print('pr', res)
            if (res > 80):



                categories = ['invalid', 'apple leaf']

        # process your result for human
                pred_class = result.argmax()
                print('p',pred_class)
                output=categories[pred_class]
                return output
            elif(res<80):

                print('resultl len', len(result))
                print('result sizr', result.size)
                print(result.argmax())
                pred_class = result.argmax()
                categories = ['apple leaf', 'invalid']


                model = load_model("./trained model/apple2.h5")
                test_image = image.load_img(file_path, target_size=(224, 224))
                test_image = image.img_to_array(test_image)
                test_image = test_image / 255
                test_image = np.expand_dims(test_image, axis=0)
                result = model.predict(test_image)
                pred_class = result.argmax()
                categoriess = ['healthy', 'multiple_disease', 'rust', 'scab']
                output = categoriess[pred_class]
                return output

            return None

if __name__=='__main__':
  app.run(host='127.0.0.1', port=50